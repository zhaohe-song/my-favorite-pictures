{"version":3,"sources":["firebase/firebaseConfig.js","firebase/config.js","components/ImageGrid.js","components/Modal.js","components/Images.js","hooks/useFirestore.js","components/Title.js","components/ProgressBar.js","hooks/useStorage.js","components/UploadForm.js","App.js","reportWebVitals.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","ImageGrid","docs","setSelectedImg","className","map","doc","div","onClick","url","layout","whileHover","opacity","img","src","alt","id","React","memo","Modal","selectedImg","e","target","classList","contains","initial","y","animate","Images","useState","collection","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","document","forEach","push","data","useFirestore","Title","ProgressBar","file","setFile","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","useStorage","width","UploadForm","type","onChange","selected","files","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4ffd1b92.chunk.js","sourcesContent":["const firebaseConfig = {\n\tapiKey: 'AIzaSyAmtFn9QcoAV7z528C-i2NxoBEoSDjRh4w',\n\tauthDomain: 'firegram-83420.firebaseapp.com',\n\tprojectId: 'firegram-83420',\n\tstorageBucket: 'firegram-83420.appspot.com',\n\tmessagingSenderId: '633373084223',\n\tappId: '1:633373084223:web:8cf01473d160a2309c468a'\n};\n\nexport default firebaseConfig;\n","import firebaseConfig from './firebaseConfig';\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\nfirebase.initializeApp(firebaseConfig);\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectStorage, projectFirestore, timestamp };\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst ImageGrid = ({ docs, setSelectedImg }) => {\n\treturn (\n\t\t<div className=\"img-grid\">\n\t\t\t{docs &&\n\t\t\t\tdocs.map((doc) => (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tkey={doc.id}\n\t\t\t\t\t\tclassName=\"img-wrap\"\n\t\t\t\t\t\tonClick={() => setSelectedImg(doc.url)}\n\t\t\t\t\t\tlayout\n\t\t\t\t\t\twhileHover={{ opacity: 1 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<motion.img src={doc.url} alt=\"\" />\n\t\t\t\t\t</motion.div>\n\t\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default React.memo(ImageGrid);\n","import { motion } from 'framer-motion';\n\nconst Modal = ({ selectedImg, setSelectedImg }) => {\n\tconst handleClick = (e) => {\n\t\tif (e.target.classList.contains('backdrop')) {\n\t\t\tsetSelectedImg(null);\n\t\t}\n\t};\n\treturn (\n\t\t<motion.div\n\t\t\tclassName=\"backdrop\"\n\t\t\tonClick={handleClick}\n\t\t\tinitial={{ opacity: 0, y: '-100vh' }}\n\t\t\tanimate={{ opacity: 1, y: 0 }}\n\t\t>\n\t\t\t<motion.img src={selectedImg} alt=\"\" />\n\t\t</motion.div>\n\t);\n};\n\nexport default Modal;\n","import { Fragment, useState } from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport ImageGrid from './ImageGrid';\nimport Modal from './Modal';\n\nconst Images = () => {\n\tconst [ selectedImg, setSelectedImg ] = useState(null);\n\tconst { docs } = useFirestore('images');\n\treturn (\n\t\t<Fragment>\n\t\t\t<ImageGrid docs={docs} setSelectedImg={setSelectedImg} />\n\t\t\t{selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />}\n\t\t</Fragment>\n\t);\n};\n\nexport default Images;\n","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config';\n\nexport default function(collection) {\n\tconst [ docs, setDocs ] = useState([]);\n\tuseEffect(\n\t\t() => {\n\t\t\tconst unsub = projectFirestore.collection(collection).orderBy('createdAt', 'desc').onSnapshot((snap) => {\n\t\t\t\tconst document = [];\n\t\t\t\tsnap.forEach((doc) => {\n\t\t\t\t\tdocument.push({ ...doc.data(), id: doc.id });\n\t\t\t\t});\n\t\t\t\tsetDocs(document);\n\t\t\t});\n\t\t\treturn () => unsub();\n\t\t},\n\t\t[ collection ]\n\t);\n\treturn { docs };\n}\n","const Title = () => {\n\treturn (\n\t\t<div className=\"title\">\n\t\t\t<h1>My Favorite Pictures</h1>\n\t\t\t<h2>Add a new one</h2>\n\t\t</div>\n\t);\n};\n\nexport default Title;\n","import React, { useEffect } from 'react';\nimport useStorage from '../hooks/useStorage';\nimport { motion } from 'framer-motion';\n\nconst ProgressBar = ({ file, setFile }) => {\n\tconst { progress, url } = useStorage(file);\n\tuseEffect(\n\t\t() => {\n\t\t\tif (url) setFile(null);\n\t\t},\n\t\t[ url ]\n\t);\n\n\treturn <motion.div className=\"progress-bar\" initial={{ width: 0 }} animate={{ width: progress + '%' }} />;\n};\n\nexport default ProgressBar;\n","import { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\n\nexport default function(file) {\n\tconst [ progress, setProgress ] = useState(0);\n\tconst [ error, setError ] = useState(null);\n\tconst [ url, setUrl ] = useState(null);\n\tuseEffect(\n\t\t() => {\n\t\t\tconst storageRef = projectStorage.ref(file.name);\n\t\t\tconst collectionRef = projectFirestore.collection('images');\n\t\t\tstorageRef.put(file).on(\n\t\t\t\t'state_changed',\n\t\t\t\t(snap) => {\n\t\t\t\t\tconst percentage = snap.bytesTransferred / snap.totalBytes * 100;\n\t\t\t\t\tsetProgress(percentage);\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\tsetError(err);\n\t\t\t\t},\n\t\t\t\tasync () => {\n\t\t\t\t\tconst url = await storageRef.getDownloadURL();\n\t\t\t\t\tsetUrl(url);\n\t\t\t\t\tconst createdAt = timestamp();\n\t\t\t\t\tawait collectionRef.add({ url, createdAt });\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\t\t[ file ]\n\t);\n\treturn { progress, error, url };\n}\n","import { useState } from 'react';\nimport ProgressBar from './ProgressBar';\n\nconst UploadForm = () => {\n\tconst [ file, setFile ] = useState(null);\n\tconst [ error, setError ] = useState(null);\n\tconst handleChange = (e) => {\n\t\tconst selected = e.target.files[0];\n\t\tconst types = [ 'image/png', 'image/jpeg' ];\n\t\tif (selected && types.includes(selected.type)) {\n\t\t\tsetFile(selected);\n\t\t\tsetError('');\n\t\t} else {\n\t\t\tsetFile(null);\n\t\t\tsetError('Please choose an image file');\n\t\t}\n\t};\n\treturn (\n\t\t<form>\n\t\t\t<label>\n\t\t\t\t<input type=\"file\" onChange={handleChange} />\n\t\t\t\t<span>+</span>\n\t\t\t</label>\n\t\t\t<div className=\"output\">\n\t\t\t\t{file && <div>{file.name}</div>}\n\t\t\t\t<div className=\"error\">{error}</div>\n\t\t\t\t{file && <ProgressBar file={file} setFile={setFile} />}\n\t\t\t</div>\n\t\t</form>\n\t);\n};\n\nexport default UploadForm;\n","import Images from './components/Images';\nimport Title from './components/Title';\nimport UploadForm from './components/UploadForm';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Title />\n\t\t\t<UploadForm />\n\t\t\t<Images />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}