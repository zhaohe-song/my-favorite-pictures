{"version":3,"sources":["firebase/firebaseConfig.js","firebase/config.js","hooks/useFirestore.js","components/ImageGrid.js","components/Modal.js","components/Images.js","components/Title.js","hooks/useStorage.js","components/ProgressBar.js","components/UploadForm.js","App.js","reportWebVitals.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","document","forEach","doc","push","data","id","ImageGrid","setSelectedImg","className","map","div","onClick","url","layout","whileHover","opacity","img","src","alt","React","memo","Modal","selectedImg","e","target","classList","contains","initial","y","animate","Images","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","type","onChange","selected","files","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e19ea6db.chunk.js","sourcesContent":["const firebaseConfig = {\n\tapiKey: 'AIzaSyAmtFn9QcoAV7z528C-i2NxoBEoSDjRh4w',\n\tauthDomain: 'firegram-83420.firebaseapp.com',\n\tprojectId: 'firegram-83420',\n\tstorageBucket: 'firegram-83420.appspot.com',\n\tmessagingSenderId: '633373084223',\n\tappId: '1:633373084223:web:8cf01473d160a2309c468a'\n};\n\nexport default firebaseConfig;\n","import firebaseConfig from './firebaseConfig';\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\nfirebase.initializeApp(firebaseConfig);\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectStorage, projectFirestore, timestamp };\n","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config';\n\nconst useFirestore = (collection) => {\n\tconst [ docs, setDocs ] = useState([]);\n\tuseEffect(\n\t\t() => {\n\t\t\tconst unsub = projectFirestore.collection(collection).orderBy('createdAt', 'desc').onSnapshot((snap) => {\n\t\t\t\tconst document = [];\n\t\t\t\tsnap.forEach((doc) => {\n\t\t\t\t\tdocument.push({ ...doc.data(), id: doc.id });\n\t\t\t\t});\n\t\t\t\tsetDocs(document);\n\t\t\t});\n\t\t\treturn () => unsub();\n\t\t},\n\t\t[ collection ]\n\t);\n\treturn { docs };\n};\n\nexport default useFirestore;\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst ImageGrid = ({ docs, setSelectedImg }) => {\n\treturn (\n\t\t<div className=\"img-grid\">\n\t\t\t{docs &&\n\t\t\t\tdocs.map((doc) => (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tkey={doc.id}\n\t\t\t\t\t\tclassName=\"img-wrap\"\n\t\t\t\t\t\tonClick={() => setSelectedImg(doc.url)}\n\t\t\t\t\t\tlayout\n\t\t\t\t\t\twhileHover={{ opacity: 1 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<motion.img src={doc.url} alt=\"\" />\n\t\t\t\t\t</motion.div>\n\t\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default React.memo(ImageGrid);\n","import { motion } from 'framer-motion';\n\nconst Modal = ({ selectedImg, setSelectedImg }) => {\n\tconst handleClick = (e) => {\n\t\tif (e.target.classList.contains('backdrop')) {\n\t\t\tsetSelectedImg(null);\n\t\t}\n\t};\n\treturn (\n\t\t<motion.div\n\t\t\tclassName=\"backdrop\"\n\t\t\tonClick={handleClick}\n\t\t\tinitial={{ opacity: 0, y: '-100vh' }}\n\t\t\tanimate={{ opacity: 1, y: 0 }}\n\t\t>\n\t\t\t<motion.img src={selectedImg} alt=\"\" />\n\t\t</motion.div>\n\t);\n};\n\nexport default Modal;\n","import { Fragment, useState } from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport ImageGrid from './ImageGrid';\nimport Modal from './Modal';\n\nconst Images = () => {\n\tconst [ selectedImg, setSelectedImg ] = useState(null);\n\tconst { docs } = useFirestore('images');\n\treturn (\n\t\t<Fragment>\n\t\t\t<ImageGrid docs={docs} setSelectedImg={setSelectedImg} />\n\t\t\t{selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />}\n\t\t</Fragment>\n\t);\n};\n\nexport default Images;\n","const Title = () => {\n\treturn (\n\t\t<div className=\"title\">\n\t\t\t<h1>My Favorite Pictures</h1>\n\t\t\t<h2>Add a new one</h2>\n\t\t</div>\n\t);\n};\n\nexport default Title;\n","import { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\n\nconst useStorage = (file) => {\n\tconst [ progress, setProgress ] = useState(0);\n\tconst [ error, setError ] = useState(null);\n\tconst [ url, setUrl ] = useState(null);\n\tuseEffect(\n\t\t() => {\n\t\t\tconst storageRef = projectStorage.ref(file.name);\n\t\t\tconst collectionRef = projectFirestore.collection('images');\n\t\t\tstorageRef.put(file).on(\n\t\t\t\t'state_changed',\n\t\t\t\t(snap) => {\n\t\t\t\t\tconst percentage = snap.bytesTransferred / snap.totalBytes * 100;\n\t\t\t\t\tsetProgress(percentage);\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\tsetError(err);\n\t\t\t\t},\n\t\t\t\tasync () => {\n\t\t\t\t\tconst url = await storageRef.getDownloadURL();\n\t\t\t\t\tsetUrl(url);\n\t\t\t\t\tconst createdAt = timestamp();\n\t\t\t\t\tawait collectionRef.add({ url, createdAt });\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\t\t[ file ]\n\t);\n\treturn { progress, error, url };\n};\n\nexport default useStorage;\n","import React, { useEffect } from 'react';\nimport useStorage from '../hooks/useStorage';\nimport { motion } from 'framer-motion';\n\nconst ProgressBar = ({ file, setFile }) => {\n\tconst { progress, url } = useStorage(file);\n\tuseEffect(\n\t\t() => {\n\t\t\tif (url) setFile(null);\n\t\t},\n\t\t[ url, setFile ]\n\t);\n\n\treturn <motion.div className=\"progress-bar\" initial={{ width: 0 }} animate={{ width: progress + '%' }} />;\n};\n\nexport default ProgressBar;\n","import { useState } from 'react';\nimport ProgressBar from './ProgressBar';\n\nconst UploadForm = () => {\n\tconst [ file, setFile ] = useState(null);\n\tconst [ error, setError ] = useState(null);\n\tconst handleChange = (e) => {\n\t\tconst selected = e.target.files[0];\n\t\tconst types = [ 'image/png', 'image/jpeg' ];\n\t\tif (selected && types.includes(selected.type)) {\n\t\t\tsetFile(selected);\n\t\t\tsetError('');\n\t\t} else {\n\t\t\tsetFile(null);\n\t\t\tsetError('Please choose an image file');\n\t\t}\n\t};\n\treturn (\n\t\t<form>\n\t\t\t<label>\n\t\t\t\t<input type=\"file\" onChange={handleChange} />\n\t\t\t\t<span>+</span>\n\t\t\t</label>\n\t\t\t<div className=\"output\">\n\t\t\t\t{file && <div>{file.name}</div>}\n\t\t\t\t<div className=\"error\">{error}</div>\n\t\t\t\t{file && <ProgressBar file={file} setFile={setFile} />}\n\t\t\t</div>\n\t\t</form>\n\t);\n};\n\nexport default UploadForm;\n","import Images from './components/Images';\nimport Title from './components/Title';\nimport UploadForm from './components/UploadForm';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Title />\n\t\t\t<UploadForm />\n\t\t\t<Images />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}